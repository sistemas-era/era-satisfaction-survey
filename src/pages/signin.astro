---
import { app } from '../firebase/server'
import { getAuth } from 'firebase-admin/auth'
import Layout from '../layouts/layout.astro'

const auth = getAuth(app)

if (Astro.cookies.has('__session')) {
  const sessionCookie = Astro.cookies.get('__session')!.value
  const decodedCookie = await auth.verifySessionCookie(sessionCookie)
  if (decodedCookie) {
    return Astro.redirect('/dashboard')
  }
}
---

<Layout title="Iniciar sesión">
  <main class="grid min-h-screen place-items-center bg-white px-4">
    <section class="w-full max-w-md rounded-2xl border border-slate-200 bg-white p-8 shadow-xl">
      <header class="mb-6 text-center">
        <h1 class="text-3xl font-semibold tracking-tight text-[#10466a]">Iniciar sesión</h1>
        <p class="mt-1 text-sm text-slate-500">Ingresa tus credenciales para continuar.</p>
      </header>

      <form class="space-y-6">
        <div class="space-y-1.5">
          <label for="email" class="block text-sm font-medium text-slate-700"> Email </label>
          <input
            id="email"
            name="email"
            type="email"
            required
            autocomplete="email"
            class="block w-full rounded-lg border border-slate-300 px-4 py-3 text-slate-900 transition outline-none focus:border-[#10466a]/70 focus:ring-1 focus:ring-[#10466a]/70"
            placeholder="tucorreo@dominio.com"
          />
        </div>

        <div class="space-y-1.5">
          <label for="password" class="block text-sm font-medium text-slate-700">
            Contraseña
          </label>
          <input
            id="password"
            name="password"
            type="password"
            required
            autocomplete="current-password"
            class="block w-full rounded-lg border border-slate-300 px-4 py-3 text-slate-900 transition outline-none focus:border-[#10466a]/70 focus:ring-1 focus:ring-[#10466a]/70"
            placeholder="••••••••"
          />
        </div>

        <p id="formError" class="hidden text-sm text-red-600"></p>

        <button
          id="submitBtn"
          type="submit"
          class="w-full rounded-lg bg-[#10466a] px-4 py-3 font-medium text-white shadow-md transition hover:bg-[#0d3b59] active:bg-[#082a40] disabled:cursor-not-allowed disabled:opacity-60"
        >
          <span class="inline-flex items-center justify-center gap-2">
            <svg data-spinner class="hidden h-5 w-5 animate-spin" viewBox="0 0 24 24" fill="none">
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"></circle>
              <path
                class="opacity-75"
                d="M4 12a8 8 0 018-8"
                stroke="currentColor"
                stroke-width="4"
                stroke-linecap="round"></path>
            </svg>
            <span data-label>Ingresar</span>
          </span>
        </button>
      </form>
    </section>
  </main>
</Layout>

<script>
  import { getAuth, inMemoryPersistence, signInWithEmailAndPassword } from 'firebase/auth'
  import { app } from '../firebase/client'

  const auth = getAuth(app)

  auth.setPersistence(inMemoryPersistence)

  const $form = document.querySelector('form') as HTMLFormElement
  const $submitBtn = document.querySelector('#submitBtn') as HTMLButtonElement
  const $formError = document.querySelector('#formError') as HTMLParagraphElement
  const $spinner = $submitBtn.querySelector('[data-spinner]') as HTMLElement
  const $label = $submitBtn.querySelector('[data-label]') as HTMLElement

  const setLoading = (isLoading: boolean) => {
    $form.setAttribute('aria-busy', String(isLoading))
    $submitBtn.disabled = isLoading
    $spinner.classList.toggle('hidden', !isLoading)
    $label.textContent = isLoading ? 'Ingresando…' : 'Ingresar'
  }

  $form.addEventListener('submit', async (e) => {
    e.preventDefault()
    setLoading(true)
    $formError.classList.add('hidden')
    $formError.textContent = ''

    try {
      const formData = new FormData($form)
      const email = formData.get('email')?.toString()
      const password = formData.get('password')?.toString()

      if (!email || !password) {
        return
      }
      const userCredential = await signInWithEmailAndPassword(auth, email, password)
      const idToken = await userCredential.user.getIdToken()
      const response = await fetch('/api/auth/signin', {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      })

      if (response.redirected) {
        window.location.assign(response.url)
      }
    } catch (error) {
      console.error('Error during sign-in', error)
      $formError.textContent =
        'Error al iniciar sesión. Por favor, verifica tus credenciales e intenta nuevamente.'
      $formError.classList.remove('hidden')
    } finally {
      setLoading(false)
    }
  })
</script>
